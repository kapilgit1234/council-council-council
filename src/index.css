@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700;800;900&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

/* AlphaWave inspired design system for Energy Science Department */

@layer base {
  /* Prevent accidental horizontal scroll from animated/background elements */
  html, body, #root {
    height: 100%;
    width: 100%;
    overflow-x: hidden;
    /* Keep vertical scrolling enabled but hide visual scrollbars across browsers */
    overflow-y: auto;
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }

  /* Reset default spacing and box sizing to avoid unexpected gaps */
  html, body, #root, * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  /* Header height variable used to offset fixed header from content
     Adjust this if the header's computed height changes. */
  :root {
    --header-height: 64px;
  }

  /* Add top padding so fixed header doesn't create extra document height
     and bottom padding to avoid footer being flush with viewport edge. */
  body {
    padding-top: var(--header-height);
    padding-bottom: 1rem;
  }

  :root {
    /* Dark futuristic theme */
    --background: 220 15% 8%;
    --foreground: 45 85% 85%;
    
    /* Golden accent colors */
    --primary: 45 85% 65%;
    --primary-foreground: 220 15% 8%;
    --primary-glow: 45 100% 75%;
    
    /* Secondary amber tones */
    --secondary: 40 80% 60%;
    --secondary-foreground: 220 15% 8%;
    
    /* Muted colors */
    --muted: 220 15% 15%;
    --muted-foreground: 45 20% 50%;
    
    /* Accent colors */
    --accent: 50 90% 70%;
    --accent-foreground: 220 15% 8%;
    
    /* UI elements */
    --card: 220 15% 10%;
    --card-foreground: 45 85% 85%;
    
    --popover: 220 15% 12%;
    --popover-foreground: 45 85% 85%;
    
    --border: 45 50% 25%;
    --input: 220 15% 12%;
    --ring: 45 85% 65%;
    
    --destructive: 0 84% 60%;
    --destructive-foreground: 45 85% 85%;
    
    --radius: 0.5rem;
    
    /* Custom gradients */
    --gradient-primary: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-glow)));
    --gradient-background: linear-gradient(180deg, hsl(220 15% 8%), hsl(220 15% 6%));
    --gradient-card: linear-gradient(145deg, hsl(220 15% 10%), hsl(220 15% 12%));
    
    /* Grid animations */
    --grid-color: 45 50% 25%;
    --grid-line: 45 60% 35%;
    --grid-glow: 45 85% 65%;
    
    /* Shadows */
    --shadow-glow: 0 0 40px hsl(var(--primary-glow) / 0.3);
    --shadow-card: 0 10px 30px hsl(220 15% 4% / 0.5);
    
    /* Transitions */
    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --transition-bounce: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground font-orbitron;
    background: var(--gradient-background);
    /* Ensure the body's minimum height accounts for the fixed header so
       padding-top doesn't create extra document height and a visible gap
       when the viewport is resized. */
    min-height: calc(100vh - var(--header-height));
  }
  
  h1, h2, h3, h4, h5, h6 {
    @apply font-orbitron font-bold;
    text-shadow: 0 0 20px hsl(var(--primary-glow) / 0.5);
  }
}

@layer components {
  /* Grid Background Animation */
  .grid-background {
    position: fixed;
    inset: 0;
    width: 100%;
    height: 100%;
    overflow: hidden; /* ensure animated children can't create scrollbars */
    pointer-events: none;
    z-index: -1;
    opacity: 0.3;
  }
  
  .grid-container {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    perspective: 1000px;
    transform-style: preserve-3d;
  }
  
  .grid-plane {
    position: absolute;
    inset: 0;
    /* keep the visual scale but avoid using offsets that can create scrollbars */
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    transform-origin: center center;
    transform: scale(1.2) rotateX(60deg) translateZ(-100px);
    /* Use the bright (end-state) background from the gridShine animation so
       the grid stays constantly bright instead of pulsing. */
    background-image: 
      linear-gradient(hsl(var(--grid-line) / 0.8) 1px, transparent 1px),
      linear-gradient(90deg, hsl(var(--grid-line) / 0.8) 1px, transparent 1px),
      radial-gradient(circle at 25% 25%, hsl(var(--grid-glow) / 0.6) 1px, transparent 3px),
      radial-gradient(circle at 75% 75%, hsl(var(--grid-glow) / 0.4) 1px, transparent 2px);
    background-size: 60px 60px, 60px 60px, 120px 120px, 180px 180px;
  /* Only float motion remains; the shine is constant now. */
  animation: gridFloat 20s infinite linear;
    /* reduced shadow intensity to lower paint cost */
    box-shadow: 
      0 0 30px hsl(var(--grid-glow) / 0.12),
      0 0 60px hsl(var(--grid-glow) / 0.06);
  }
  
  @keyframes gridFloat {
    /* reduce Y motion to avoid extending beyond viewport */
    0% { transform: rotateX(60deg) translateZ(-100px) translateY(0px); }
    50% { transform: rotateX(60deg) translateZ(-100px) translateY(-6px); }
    100% { transform: rotateX(60deg) translateZ(-100px) translateY(0px); }
  }
  
  @keyframes gridShine {
    0% {
      background-image: 
        linear-gradient(hsl(var(--grid-line) / 0.4) 1px, transparent 1px),
        linear-gradient(90deg, hsl(var(--grid-line) / 0.4) 1px, transparent 1px),
        radial-gradient(circle at 25% 25%, hsl(var(--grid-glow) / 0.2) 1px, transparent 3px),
        radial-gradient(circle at 75% 75%, hsl(var(--grid-glow) / 0.1) 1px, transparent 2px);
    }
    100% {
      background-image: 
        linear-gradient(hsl(var(--grid-line) / 0.8) 1px, transparent 1px),
        linear-gradient(90deg, hsl(var(--grid-line) / 0.8) 1px, transparent 1px),
        radial-gradient(circle at 25% 25%, hsl(var(--grid-glow) / 0.6) 1px, transparent 3px),
        radial-gradient(circle at 75% 75%, hsl(var(--grid-glow) / 0.4) 1px, transparent 2px);
    }
  }
  
  /* Floating Grid Blocks */
  .floating-blocks {
    position: absolute;
    width: 100%;
    height: 100%;
    pointer-events: none;
    contain: layout; /* contain layout and paint to avoid affecting parent size */
    will-change: transform; /* optimize but avoid relayouts */
  }
  
  .floating-block {
    position: absolute;
    width: 40px;
    height: 40px;
    border: 1px solid hsl(var(--grid-color));
    background: linear-gradient(145deg, transparent, hsl(var(--grid-color) / 0.1));
    animation: floatBlock 15s infinite ease-in-out;
    opacity: 0.6;
  }
  
  .floating-block.glow {
    border-color: hsl(var(--grid-glow));
    background: linear-gradient(145deg, hsl(var(--grid-glow) / 0.1), hsl(var(--grid-glow) / 0.2));
    box-shadow: 0 0 8px hsl(var(--grid-glow) / 0.28);
  }
  
  @keyframes floatBlock {
    0%, 100% { transform: translateY(0px) rotateY(0deg); }
    25% { transform: translateY(-6px) rotateY(90deg); }
    50% { transform: translateY(-4px) rotateY(180deg); }
    75% { transform: translateY(-8px) rotateY(270deg); }
  }
  
  /* Glitch Text Effect */
  .glitch-text {
    position: relative;
    animation: glitch 2s infinite;
  }
  
  .glitch-text::before,
  .glitch-text::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  
  .glitch-text::before {
    animation: glitch-1 0.5s infinite;
    color: hsl(var(--accent));
    z-index: -1;
  }
  
  .glitch-text::after {
    animation: glitch-2 0.5s infinite;
    color: hsl(var(--secondary));
    z-index: -2;
  }
  
  @keyframes glitch {
    0%, 100% { transform: translate(0); }
    20% { transform: translate(-2px, 2px); }
    40% { transform: translate(-2px, -2px); }
    60% { transform: translate(2px, 2px); }
    80% { transform: translate(2px, -2px); }
  }
  
  @keyframes glitch-1 {
    0%, 100% { transform: translate(0); }
    20% { transform: translate(2px, -2px); }
    40% { transform: translate(-2px, 2px); }
    60% { transform: translate(-2px, -2px); }
    80% { transform: translate(2px, 2px); }
  }
  
  @keyframes glitch-2 {
    0%, 100% { transform: translate(0); }
    20% { transform: translate(-2px, -2px); }
    40% { transform: translate(2px, -2px); }
    60% { transform: translate(2px, 2px); }
    80% { transform: translate(-2px, 2px); }
  }
  
  /* Holographic Effect */
  .holographic {
    background: linear-gradient(45deg, 
      hsl(var(--primary) / 0.1), 
      hsl(var(--accent) / 0.1), 
      hsl(var(--secondary) / 0.1),
      hsl(var(--primary) / 0.1)
    );
    background-size: 400% 400%;
    animation: holographicShift 4s ease-in-out infinite;
    border: 1px solid hsl(var(--primary) / 0.3);
  }
  
  @keyframes holographicShift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }
  
  /* Pulsing Glow */
  .pulse-glow {
    animation: pulseGlow 2s ease-in-out infinite alternate;
  }
  
  @keyframes pulseGlow {
    from { box-shadow: 0 0 8px hsl(var(--primary-glow) / 0.32); }
    to { box-shadow: 0 0 16px hsl(var(--primary-glow) / 0.52); }
  }
  
  /* Scan Line Effect */
  .scan-lines::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      90deg,
      transparent 98%,
      hsl(var(--primary) / 0.1) 100%
    );
    background-size: 3px 100%;
    animation: scanLines 2s linear infinite;
    pointer-events: none;
  }
  
  @keyframes scanLines {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100vw); }
  }
}

/* Utility: decorative absolute elements should not affect document flow or create overflow */
.abs-decor {
  pointer-events: none;
  backface-visibility: hidden;
  transform: translateZ(0);
  max-width: 100vw;
  max-height: 100vh;
}

/* Low resource / reduced motion: disable heavy animations and glows */
.no-anim .grid-plane,
.no-anim .floating-blocks,
.no-anim .floating-block,
.no-anim .scan-lines::after,
.no-anim .glitch-text::before,
.no-anim .glitch-text::after,
.no-anim .pulse-glow {
  animation: none !important;
}
.no-anim .grid-plane {
  transform: none !important;
  background-size: 60px 60px !important;
  box-shadow: none !important;
}
.no-anim .floating-block {
  opacity: 0.4 !important;
  transform: none !important;
}
.no-anim body {
  transition: none !important;
}

@layer utilities {
  .text-glow {
    text-shadow: 0 0 10px hsl(var(--primary-glow) / 0.6);
  }

  /* Dev helper: outline elements to find overflow issues.
     Toggle by appending ?debugOverflow=1 to the URL in dev. */
  .overflow-debug * {
    outline: 1px solid rgba(255,0,0,0.12);
  }
  .overflow-debug .grid-background,
  .overflow-debug .floating-block,
  .overflow-debug .grid-plane {
    outline: 1px dashed rgba(0,200,255,0.25);
  }

  /* Hide scrollbars for WebKit/Blink (Chrome, Safari, Edge) while preserving scroll behavior */
  html::-webkit-scrollbar,
  body::-webkit-scrollbar,
  #root::-webkit-scrollbar,
  *::-webkit-scrollbar {
    width: 0;
    height: 0;
    background: transparent;
  }
  
  .border-glow {
    border-color: hsl(var(--primary));
    box-shadow: 0 0 10px hsl(var(--primary) / 0.3);
  }
  
  .bg-glass {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
}